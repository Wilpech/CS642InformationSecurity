This exploit works by abusing a very small error in the target's code. The main issue here is that the loop they were using had one too many bytes and we can only use a buffer overflow style attack within the parameters of one byte. This is, luckily, where the saved frame ptr is stored and thus we can alter the stack pointer that is used after this loop is exited. To do this I made a buffer that was one byte larger than the one used in the target, it was filled with NOPs and shellcode like the previous target and then a random address within the the sea of NOPs because I didn't want to do the math for the shellcode addr and then this should operate just like the preceding target.