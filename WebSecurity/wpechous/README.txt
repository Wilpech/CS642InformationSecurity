Part A: Cookie Thief
This first part of the assignment required us to exploit the URL of zoomail.org. More specifically, the attack that I made exploited the vulnerability in the zoomail.org URL system and more specifically again, on the users part of the website. So long as you follow up after the users with an " and end it with >, you can insert any javascript into the URL and it will be executed. I chose to go about emailing myself the cookie by creating a javascript image element and associated that with the payload which was the document.cookie. I also avoided the red text error by just sending the user back to the zoomail.org page by using the javascript function document.location.

Part B: Cross-Site Request Forgery
The second part was to make an HTML doc that transferred us 10 zoobar credits and then redirected the user to google.com. I went about doing this by altering the the frame system and creating an iframe that hid the action attribute and the target attribute that would transfer the credits using the transfer URL. By mimicking the transfer.php code for zoobar.org I was able to create a transfer and then used the .unload property that would then reload the entire page after the form is submitted and redirect the user to google. Therefore erasing the trail and making it seem like the user just had a little bug but really I stole their precious zoobar credits.

Part C: SQL Injection
The vulnerability for this attack lies in how the system takes in user input for username and password. This attack also hinges on the fact that this username "--" is not already in the system, but once it is it will no longer work. SQL comments out code by the -- mark and I used this to exploit the system. Basically, I created a form that has the user submit a username. The username gets submitted and -- gets added onto the end of the username. During the query where they check for the password attached to our new username, it treates the -- like a comment out and doesn't check the last part of the SQL query that would check the password so they skip that part of the process and log the user in with just the name and no password. I guess I could fix this, but I am unsure how.

Btw, I'm really happy I was able to finish this time. This was a lot more fun than the last one and I think it took a lot less ~math~ which is nice. I can't avoid it but breaking this stuff was a lot more fun.